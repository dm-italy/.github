name: 'Create GitHub Release'
description: 'Create GitHub release with artifacts, changelog, and Docker image references'
author: 'DiemmeGroup DevOps'

inputs:
  github_token:
    description: 'GitHub token for creating releases'
    required: true
  tag_name:
    description: 'Release tag name (e.g., v1.0.0)'
    required: true
  release_name:
    description: 'Release name (defaults to tag name)'
    required: false
    default: ''
  body:
    description: 'Release body/description (markdown supported)'
    required: false
    default: ''
  draft:
    description: 'Create as draft release'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  generate_release_notes:
    description: 'Auto-generate release notes from commits'
    required: false
    default: 'true'
  artifacts:
    description: 'Comma-separated list of artifact names to attach'
    required: false
    default: ''
  docker_images:
    description: 'JSON array of Docker image references to include in release notes'
    required: false
    default: '[]'
  previous_tag:
    description: 'Previous tag for comparison in release notes'
    required: false
    default: ''

outputs:
  release_id:
    description: 'Created release ID'
    value: ${{ steps.create.outputs.id }}
  release_url:
    description: 'URL of the created release'
    value: ${{ steps.create.outputs.url }}
  release_upload_url:
    description: 'Upload URL for release assets'
    value: ${{ steps.create.outputs.upload_url }}

runs:
  using: "composite"
  steps:
    - name: Generate release date
      id: release_date
      shell: bash
      run: echo "date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    - name: Extract changelog
      id: changelog
      shell: bash
      run: |
        if [ -f "CHANGELOG.md" ]; then
          # Extract the latest version's changelog
          CHANGELOG=$(awk '/^## \[/{if(++count==2)exit}count==1' CHANGELOG.md || cat CHANGELOG.md)
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        else
          echo "changelog=Release ${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Prepare release metadata
      id: prepare
      shell: bash
      run: |
        TAG_NAME="${{ inputs.tag_name }}"
        RELEASE_NAME="${{ inputs.release_name }}"
        CUSTOM_BODY="${{ inputs.body }}"

        # Use tag name as release name if not provided
        if [ -z "$RELEASE_NAME" ]; then
          RELEASE_NAME="$TAG_NAME"
        fi

        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "Release name: $RELEASE_NAME"

        # Build structured release body
        RELEASE_BODY="# $RELEASE_NAME\n\n"
        RELEASE_BODY="${RELEASE_BODY}**Release Date:** ${{ steps.release_date.outputs.date }}\n"
        RELEASE_BODY="${RELEASE_BODY}**Commit:** ${{ github.sha }}\n"
        RELEASE_BODY="${RELEASE_BODY}**Branch:** ${{ github.ref_name }}\n\n"

        # Add changelog section
        RELEASE_BODY="${RELEASE_BODY}${{ steps.changelog.outputs.changelog }}\n\n"

        # Add custom body if provided
        if [ -n "$CUSTOM_BODY" ]; then
          RELEASE_BODY="${RELEASE_BODY}${CUSTOM_BODY}\n\n"
        fi

        # Add Docker images section if provided
        DOCKER_IMAGES='${{ inputs.docker_images }}'
        if [ "$DOCKER_IMAGES" != "[]" ]; then
          RELEASE_BODY="${RELEASE_BODY}## üê≥ Docker Images\n\n"
          RELEASE_BODY="${RELEASE_BODY}This release includes the following Docker images:\n\n"

          # Parse JSON array and add each image
          echo "$DOCKER_IMAGES" | jq -r '.[]' | while read -r image; do
            RELEASE_BODY="${RELEASE_BODY}- \`$image\`\n"
          done

          RELEASE_BODY="${RELEASE_BODY}\n**Pull command:**\n\`\`\`bash\n"
          FIRST_IMAGE=$(echo "$DOCKER_IMAGES" | jq -r '.[0]')
          RELEASE_BODY="${RELEASE_BODY}docker pull $FIRST_IMAGE\n\`\`\`\n\n"
        fi

        # Add comparison link if previous tag provided
        if [ -n "${{ inputs.previous_tag }}" ]; then
          RELEASE_BODY="${RELEASE_BODY}---\n\n"
          RELEASE_BODY="${RELEASE_BODY}**Full Changelog**: "
          RELEASE_BODY="${RELEASE_BODY}[${{ inputs.previous_tag }}...$TAG_NAME]"
          RELEASE_BODY="${RELEASE_BODY}(${{ github.server_url }}/${{ github.repository }}/compare/${{ inputs.previous_tag }}...$TAG_NAME)\n"
        fi

        # Save to output (escape newlines for GitHub Actions)
        {
          echo "release_body<<EOF"
          echo -e "$RELEASE_BODY"
          echo "EOF"
        } >> $GITHUB_OUTPUT

        echo "‚úì Release metadata prepared"

    - name: Download artifacts
      if: inputs.artifacts != ''
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: Prepare artifact list
      if: inputs.artifacts != ''
      id: artifacts
      shell: bash
      run: |
        ARTIFACTS="${{ inputs.artifacts }}"

        echo "Preparing artifacts for upload..."

        # Create list of artifact files
        ARTIFACT_FILES=""
        IFS=',' read -ra ARTIFACT_ARRAY <<< "$ARTIFACTS"

        for artifact_name in "${ARTIFACT_ARRAY[@]}"; do
          artifact_name=$(echo "$artifact_name" | xargs)  # Trim whitespace

          if [ -d "./release-artifacts/$artifact_name" ]; then
            echo "Found artifact directory: $artifact_name"

            # Create zip archive for each artifact
            cd "./release-artifacts/$artifact_name"
            zip -r "../../${artifact_name}.zip" .
            cd ../..

            if [ -n "$ARTIFACT_FILES" ]; then
              ARTIFACT_FILES="$ARTIFACT_FILES,"
            fi
            ARTIFACT_FILES="$ARTIFACT_FILES${artifact_name}.zip"

            echo "  ‚Üí Created ${artifact_name}.zip"
          else
            echo "‚ö†Ô∏è Artifact directory not found: $artifact_name"
          fi
        done

        echo "artifact_files=$ARTIFACT_FILES" >> $GITHUB_OUTPUT
        echo "‚úì Artifacts prepared"

    - name: Create GitHub Release
      id: create
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: ${{ inputs.tag_name }}
        name: ${{ steps.prepare.outputs.release_name }}
        body: ${{ steps.prepare.outputs.release_body }}
        draft: ${{ inputs.draft == 'true' }}
        prerelease: ${{ inputs.prerelease == 'true' }}
        generate_release_notes: ${{ inputs.generate_release_notes == 'true' }}
        files: |
          *.zip

    - name: Verify uploaded artifacts
      if: inputs.artifacts != ''
      shell: bash
      run: |
        echo "‚úì Artifacts uploaded via softprops/action-gh-release"

        if [ -n "${{ steps.artifacts.outputs.artifact_files }}" ]; then
          echo "Uploaded files:"
          IFS=',' read -ra FILE_ARRAY <<< "${{ steps.artifacts.outputs.artifact_files }}"
          for file in "${FILE_ARRAY[@]}"; do
            file=$(echo "$file" | xargs)
            if [ -f "$file" ]; then
              echo "  ‚úì $file"
            fi
          done
        fi

    - name: Generate release summary
      shell: bash
      run: |
        echo ""
        echo "## üéâ GitHub Release Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** \`${{ inputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Release Name:** ${{ steps.prepare.outputs.release_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release Date:** ${{ steps.release_date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL:** ${{ steps.create.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.draft }}" = "true" ]; then
          echo "üìù **Status:** Draft" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ inputs.prerelease }}" = "true" ]; then
          echo "üöß **Status:** Pre-release" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ **Status:** Published" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Add artifacts info if present
        if [ -n "${{ inputs.artifacts }}" ]; then
          echo "### üì¶ Attached Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          IFS=',' read -ra ARTIFACT_ARRAY <<< "${{ inputs.artifacts }}"
          for artifact in "${ARTIFACT_ARRAY[@]}"; do
            artifact=$(echo "$artifact" | xargs)
            echo "- \`${artifact}.zip\`" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # Add Docker images if present
        DOCKER_IMAGES='${{ inputs.docker_images }}'
        if [ "$DOCKER_IMAGES" != "[]" ]; then
          echo "### üê≥ Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "$DOCKER_IMAGES" | jq -r '.[]' | while read -r image; do
            echo "- \`$image\`" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View release: [${{ inputs.tag_name }}](${{ steps.create.outputs.url }})" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        # Cleanup downloaded artifacts
        rm -rf ./release-artifacts
        rm -f *.zip

        echo "‚úì Release creation completed"
