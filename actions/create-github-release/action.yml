name: 'Create GitHub Release'
description: 'Create GitHub release with artifacts, changelog, and Docker image references'
author: 'DiemmeGroup DevOps'

inputs:
  github_token:
    description: 'GitHub token for creating releases'
    required: true
  tag_name:
    description: 'Release tag name (e.g., v1.0.0)'
    required: true
  release_name:
    description: 'Release name (defaults to tag name)'
    required: false
    default: ''
  body:
    description: 'Release body/description (markdown supported)'
    required: false
    default: ''
  draft:
    description: 'Create as draft release'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  generate_release_notes:
    description: 'Auto-generate release notes from commits'
    required: false
    default: 'true'
  artifacts:
    description: 'Comma-separated list of artifact names to attach'
    required: false
    default: ''
  docker_images:
    description: 'JSON array of Docker image references to include in release notes'
    required: false
    default: '[]'
  previous_tag:
    description: 'Previous tag for comparison in release notes'
    required: false
    default: ''

outputs:
  release_id:
    description: 'Created release ID'
    value: ${{ steps.create.outputs.id }}
  release_url:
    description: 'URL of the created release'
    value: ${{ steps.create.outputs.url }}
  release_upload_url:
    description: 'Upload URL for release assets'
    value: ${{ steps.create.outputs.upload_url }}

runs:
  using: "composite"
  steps:
    - name: Generate release date
      id: release_date
      shell: bash
      run: echo "date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    - name: Extract changelog
      id: changelog
      shell: bash
      run: |
        if [ -f "CHANGELOG.md" ]; then
          # Extract the latest version's changelog
          CHANGELOG=$(awk '/^## \[/{if(++count==2)exit}count==1' CHANGELOG.md || cat CHANGELOG.md)
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        else
          echo "changelog=Release ${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Prepare release metadata
      id: prepare
      shell: bash
      run: |
        TAG_NAME="${{ inputs.tag_name }}"
        RELEASE_NAME="${{ inputs.release_name }}"

        # Use tag name as release name if not provided
        if [ -z "$RELEASE_NAME" ]; then
          RELEASE_NAME="$TAG_NAME"
        fi

        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "Release name: $RELEASE_NAME"

        # Build release body header safely
        {
          echo "release_body_header<<HEADER_EOF"
          echo "# $RELEASE_NAME"
          echo ""
          echo "**Release Date:** ${{ steps.release_date.outputs.date }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Branch:** ${{ github.ref_name }}"
          echo ""
          echo "HEADER_EOF"
        } >> $GITHUB_OUTPUT

        echo "✓ Release metadata prepared"

    - name: Prepare Docker images section
      id: docker
      if: inputs.docker_images != '[]'
      shell: bash
      run: |
        DOCKER_IMAGES='${{ inputs.docker_images }}'

        {
          echo "docker_section<<DOCKER_EOF"
          echo ""
          echo "## 🐳 Docker Images"
          echo ""
          echo "This release includes the following Docker images:"
          echo ""

          # Parse JSON array without jq - extract strings between quotes
          # Remove brackets and split by comma
          IMAGES=$(echo "$DOCKER_IMAGES" | sed 's/^\[//;s/\]$//;s/"//g' | tr ',' '\n')
          FIRST_IMAGE=""

          while IFS= read -r image; do
            # Trim whitespace
            image=$(echo "$image" | xargs)
            if [ -n "$image" ]; then
              echo "- \`$image\`"
              # Store first image for pull command
              if [ -z "$FIRST_IMAGE" ]; then
                FIRST_IMAGE="$image"
              fi
            fi
          done <<< "$IMAGES"

          echo ""
          echo "**Pull command:**"
          echo "\`\`\`bash"
          echo "docker pull $FIRST_IMAGE"
          echo "\`\`\`"
          echo ""
          echo "DOCKER_EOF"
        } >> $GITHUB_OUTPUT

    - name: Prepare comparison link
      id: comparison
      if: inputs.previous_tag != ''
      shell: bash
      run: |
        TAG_NAME="${{ inputs.tag_name }}"
        {
          echo "comparison_section<<COMPARISON_EOF"
          echo "---"
          echo ""
          echo "**Full Changelog**: [${{ inputs.previous_tag }}...$TAG_NAME](${{ github.server_url }}/${{ github.repository }}/compare/${{ inputs.previous_tag }}...$TAG_NAME)"
          echo "COMPARISON_EOF"
        } >> $GITHUB_OUTPUT

    - name: Build final release body
      id: body
      shell: bash
      run: |
        # Combine all sections safely using a temporary file to avoid heredoc issues
        BODY_FILE=$(mktemp)

        # Write header
        cat >> "$BODY_FILE" << 'HEADER_EOF'
        ${{ steps.prepare.outputs.release_body_header }}
        HEADER_EOF

        # Write changelog
        cat >> "$BODY_FILE" << 'CHANGELOG_EOF'
        ${{ steps.changelog.outputs.changelog }}
        CHANGELOG_EOF

        # Write custom body if present
        if [ -n "${{ inputs.body }}" ]; then
          echo "" >> "$BODY_FILE"
          cat >> "$BODY_FILE" << 'CUSTOM_EOF'
        ${{ inputs.body }}
        CUSTOM_EOF
        fi

        # Write Docker section if present
        if [ -n "${{ steps.docker.outputs.docker_section }}" ]; then
          cat >> "$BODY_FILE" << 'DOCKER_EOF'
        ${{ steps.docker.outputs.docker_section }}
        DOCKER_EOF
        fi

        # Write comparison section if present
        if [ -n "${{ steps.comparison.outputs.comparison_section }}" ]; then
          cat >> "$BODY_FILE" << 'COMPARISON_EOF'
        ${{ steps.comparison.outputs.comparison_section }}
        COMPARISON_EOF
        fi

        # Output to GITHUB_OUTPUT using the temp file
        {
          echo "final_body<<FINAL_BODY_EOF"
          cat "$BODY_FILE"
          echo "FINAL_BODY_EOF"
        } >> $GITHUB_OUTPUT

        # Cleanup
        rm -f "$BODY_FILE"

        echo "✓ Release body assembled"

    - name: Download artifacts
      if: inputs.artifacts != ''
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: Prepare artifact list
      if: inputs.artifacts != ''
      id: artifacts
      shell: bash
      run: |
        ARTIFACTS="${{ inputs.artifacts }}"

        echo "Preparing artifacts for upload..."

        # Create list of artifact files
        ARTIFACT_FILES=""
        IFS=',' read -ra ARTIFACT_ARRAY <<< "$ARTIFACTS"

        for artifact_name in "${ARTIFACT_ARRAY[@]}"; do
          artifact_name=$(echo "$artifact_name" | xargs)  # Trim whitespace

          if [ -d "./release-artifacts/$artifact_name" ]; then
            echo "Found artifact directory: $artifact_name"

            # Create zip archive for each artifact
            cd "./release-artifacts/$artifact_name"
            zip -r "../../${artifact_name}.zip" .
            cd ../..

            if [ -n "$ARTIFACT_FILES" ]; then
              ARTIFACT_FILES="$ARTIFACT_FILES,"
            fi
            ARTIFACT_FILES="$ARTIFACT_FILES${artifact_name}.zip"

            echo "  → Created ${artifact_name}.zip"
          else
            echo "⚠️ Artifact directory not found: $artifact_name"
          fi
        done

        echo "artifact_files=$ARTIFACT_FILES" >> $GITHUB_OUTPUT
        echo "✓ Artifacts prepared"

    - name: Create GitHub Release
      id: create
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: ${{ inputs.tag_name }}
        name: ${{ steps.prepare.outputs.release_name }}
        body: ${{ steps.body.outputs.final_body }}
        draft: ${{ inputs.draft == 'true' }}
        prerelease: ${{ inputs.prerelease == 'true' }}
        generate_release_notes: ${{ inputs.generate_release_notes == 'true' }}
        files: |
          *.zip

    - name: Verify uploaded artifacts
      if: inputs.artifacts != ''
      shell: bash
      run: |
        echo "✓ Artifacts uploaded via softprops/action-gh-release"

        if [ -n "${{ steps.artifacts.outputs.artifact_files }}" ]; then
          echo "Uploaded files:"
          IFS=',' read -ra FILE_ARRAY <<< "${{ steps.artifacts.outputs.artifact_files }}"
          for file in "${FILE_ARRAY[@]}"; do
            file=$(echo "$file" | xargs)
            if [ -f "$file" ]; then
              echo "  ✓ $file"
            fi
          done
        fi

    - name: Generate release summary
      shell: bash
      run: |
        echo ""
        echo "## 🎉 GitHub Release Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** \`${{ inputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Release Name:** ${{ steps.prepare.outputs.release_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release Date:** ${{ steps.release_date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL:** ${{ steps.create.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.draft }}" = "true" ]; then
          echo "📝 **Status:** Draft" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ inputs.prerelease }}" = "true" ]; then
          echo "🚧 **Status:** Pre-release" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Status:** Published" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Add artifacts info if present
        if [ -n "${{ inputs.artifacts }}" ]; then
          echo "### 📦 Attached Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          IFS=',' read -ra ARTIFACT_ARRAY <<< "${{ inputs.artifacts }}"
          for artifact in "${ARTIFACT_ARRAY[@]}"; do
            artifact=$(echo "$artifact" | xargs)
            echo "- \`${artifact}.zip\`" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # Add Docker images if present
        DOCKER_IMAGES='${{ inputs.docker_images }}'
        if [ "$DOCKER_IMAGES" != "[]" ]; then
          echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse JSON array without jq
          IMAGES=$(echo "$DOCKER_IMAGES" | sed 's/^\[//;s/\]$//;s/"//g' | tr ',' '\n')
          while IFS= read -r image; do
            image=$(echo "$image" | xargs)
            if [ -n "$image" ]; then
              echo "- \`$image\`" >> $GITHUB_STEP_SUMMARY
            fi
          done <<< "$IMAGES"

          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View release: [${{ inputs.tag_name }}](${{ steps.create.outputs.url }})" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        # Cleanup downloaded artifacts
        rm -rf ./release-artifacts
        rm -f *.zip

        echo "✓ Release creation completed"
